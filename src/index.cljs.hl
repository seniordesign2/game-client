(page "index.html"
      (:require [ascii-never-dies.core :as client]
                [ascii-never-dies.tiles :as tiles]
                [ascii-never-dies.player :as player]
                [ascii-never-dies.input :as input]))

(defc= loading? (some-> client/loading seq count)) ; contains count of in-flight commands
(defc= error-message (some-> client/error .-message)) ; contains last command's error message

(player/init-player-pos tiles/height tiles/width)
(input/init)

(html
 (head
  (link :href "app.css" :rel "stylesheet"))
 (body
  ;; Error messages and get-record output
  (p :toggle loading?
     (text "Processing ~{loading?} requests..."))
  (p :toggle error-message
     (text "Error: ~{error-message}"))
  (p (text "Record: ~{client/record}"))

  ;; Form to get a record from server db
  (let [id (cell nil)]
    (form :submit #(client/get-record @id)
          (p (label "Record ID: ")
             (input :value id :keyup #(reset! id @%))
             (button :type "submit" "submit"))))

  ;; Form to add a record to the server db
  (let [content (cell nil)]
    (form :submit #(client/update-record @content)
          (p (label "Add record: ")
             (input :value content :keyup #(reset! content @%))
             (button :type "submit" "submit"))))
  
  ;; periods (.) will represent empty space
  ;; hashtag (#) will represent walls 
  ;; at sign (@) will represent the player
  ;; letters (A) will represent various enemies
  (br)(br)(br)
  (p "TESTING initBoard loop in tiles.cljs")
  (p :id "board" (text "~{(tiles/print-board)}"))))
