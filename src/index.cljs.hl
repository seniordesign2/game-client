(page "index.html"
      (:require [ascii-never-dies.core :as client]
                [ascii-never-dies.tiles :as tiles]
                [ascii-never-dies.player :as player]
                [ascii-never-dies.input :as input]))

(enable-console-print!)

;; RPC message cells
(defc= loading? (some-> client/loading seq count)) ; contains count of in-flight commands
(defc= error-message (some-> client/error .-message)) ; contains last command's error message
(defc save-load-mode nil)

(player/init-player-pos tiles/height tiles/width)
(client/init)

;; Game state cells
(defc player-pos @player/pos)
(defc= get-player-pos player-pos)

;; Helper functions
(defn reset-player-pos! []
  (reset! player-pos @player/pos))

(defn xy-watcher [key ref old new]
  "Watcher function to update player position when the xy cell changes, AKA when the game is loaded."
  (player/set-player-pos client/get-xy)
  (swap! client/xy assoc :new false)
  (reset-player-pos!))
(add-watch client/xy nil xy-watcher)

(defn save-load-action [mode username]
  (if (= mode :save)
    (do
      (reset-player-pos!)
      (apply client/save-coords username @get-player-pos)))
  (if (= mode :load)
    (client/load-coords username)))

;;;;;;;;;;;;;;;;;;;;
; HTML
;;;;;;;;;;;;;;;;;;;;

(html
 (head
  (link :href "app.css" :rel "stylesheet"))
 (body
  ;; Form to get a record from server db
  (let [username (cell nil)]
    (form :submit #(client/get-record @username)
          (p (label "Username search: ")
             (input :value username :change #(reset! username @%))
             (button :type "submit" "submit"))))

  ;; Form to add a record to the server db
  (let [content (cell nil)]
    (form :submit #(client/update-record @content)
          (p (label "Add username: ")
             (input :value content :change #(reset! content @%))
             (button :type "submit" "submit"))))

  (br)

  ;; Buttons to save and load xy coords
  (let [username (cell nil)]
    (form :submit #(save-load-action @save-load-mode @username)
          (p (label "Username: ")
             (input :value username :change #(reset! username @%)) (br)
             (button :click #(reset! save-load-mode :save)
                     :type "submit"
                     "Save XY")
             (button :click #(reset! save-load-mode :load)
                     :type "submit"
                     "Load XY"))))
  
  ;; periods (.) will represent empty space
  ;; hashtag (#) will represent walls 
  ;; at sign (@) will represent the player
  ;; letters (A) will represent various enemies
  (br)
  #_(p :id "board" (text "~{(tiles/print-board)}"))
  (p :id "board" (text "~{(tiles/print-board)}"))
  (br)
  
  ;; Error messages and get-record output
  (p :toggle loading?
     (text "Processing ~{loading?} requests..."))
  (p :toggle error-message
     (text "Error: ~{error-message}"))
  (p (text "Stored xy: ~{client/xy}"))
  (p (text "Player pos: ~{get-player-pos}"))
  (p (text "Record: ~{client/record}"))))
