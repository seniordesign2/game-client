(page "index.html"
      (:require [ascii-never-dies.core :as client]
                [ascii-never-dies.tiles :as tiles]
                [ascii-never-dies.player :as player]
                [ascii-never-dies.input :as input]))

(enable-console-print!)

;; RPC message cells
(defc= loading? (some-> client/loading seq count)) ; contains count of in-flight commands
(defc= error-message (some-> client/error .-message)) ; contains last command's error message
(defc save-load-mode nil)

(player/init-player-pos tiles/height tiles/width)
(input/init)

;; Game state cells
(defc player-pos @player/pos)
(defc= get-player-pos (tiles/one-to-two-d player-pos))

;; Helper functions
(defn reset-player-pos! [] (reset! player-pos @player/pos))

(defn sleep [ms]
  (let [deadline (+ ms (.getTime (js/Date.)))]
    (while (> deadline (.getTime (js/Date.))))))

(defn save-load-action [mode username]
  (if (= mode :save)
    (do
      (println @get-player-pos)
      (println @client/xy)
      (apply client/save-coords username @get-player-pos)))
  (if (= mode :load)
    (do
      (client/load-coords username)
      (let [end-time (+ (.getTime (js/Date.)) 1000)]
        (loop []
          (if (not= nil @client/xy)
            true
            (do
              (println "Loading")
              (sleep 200)
              (if (< (.getTime (js/Date.)) end-time)
                (recur))))))
      (let [{x :x y :y} @client/xy]
        (player/set-player-pos (tiles/two-to-one-d x y))
        (println @client/xy)))))

(html
 (head
  (link :href "app.css" :rel "stylesheet"))
 (body
  ;; Form to get a record from server db
  (let [username (cell nil)]
    (form :submit #(client/get-record @username)
          (p (label "Username search: ")
             (input :value username :change #(reset! username @%))
             (button :type "submit" "submit"))))

  ;; Form to add a record to the server db
  (let [content (cell nil)]
    (form :submit #(client/update-record @content)
          (p (label "Add username: ")
             (input :value content :change #(reset! content @%))
             (button :type "submit" "submit"))))

  (br)

  ;; Buttons to save and load xy coords
  (let [username (cell nil)]
    (form :submit #(save-load-action @save-load-mode @username)
          (p (label "Username: ")
             (input :value username :change #(reset! username @%)) (br)
             (button :click #(do
                               (reset-player-pos!)
                               (reset! save-load-mode :save))
                     :type "submit"
                     "Save XY")
             (button :click #(reset! save-load-mode :load)
                     :type "submit"
                     "Load XY"))))
  
  ;; periods (.) will represent empty space
  ;; hashtag (#) will represent walls 
  ;; at sign (@) will represent the player
  ;; letters (A) will represent various enemies
  (br)
  (p "TESTING initBoard loop in tiles.cljs")
  (p :id "board" (text "~{(tiles/print-board)}"))

  (br)
  
  ;; Error messages and get-record output
  (p :toggle loading?
     (text "Processing ~{loading?} requests..."))
  (p :toggle error-message
     (text "Error: ~{error-message}"))
  (p (text "Record: ~{client/record}"))))
