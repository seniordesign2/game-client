(page "index.html"
      (:require [ascii-never-dies.core :as client]
                [ascii-never-dies.world :as w]
                [ascii-never-dies.player :as player]
                [ascii-never-dies.input :as input]))

(enable-console-print!)

(client/init)

;; ---------------------------------------------------------------------------
;; RPC message cells

(defc= loading? (some-> client/loading seq count)) ; contains count of in-flight commands
(defc= error-message (some-> client/error .-message)) ; contains last command's error message

;; ---------------------------------------------------------------------------
;; Game state

(defn get-state
  "Pulls all relevant data into the local state map."
  []
  (assoc {}
         :player @player/player
         :rooms @w/rooms :room-idx @w/room-idx))

(defc state (get-state))

(defn reset-state!
  "Reset stored state to local values."
  []
  (reset! state (get-state)))

;; ---------------------------------------------------------------------------
;; Helper functions

(defc save-load-mode nil)

(defn save-load-action [mode username]
  "Handles clicking either the save or load button."
  (case mode
    :save (do
            (reset-state!)
            (println @state)
            (try
              (client/save username @state)
              (catch js/Object e
                (.log js/console e))))
    :load (client/load username)))

(defn load-watcher
  "Watches to see if the game was loaded, then set appropriate values."
  [key ref old new]
  (println @client/state)
  (println (:player @client/state))
  (player/set-pos (client/get-xy))
  (player/set-health (client/get-health))
  (w/set-room-idx (client/get-room-idx))
  (w/set-rooms (client/get-rooms))
  (swap! client/state assoc :new false))
(add-watch client/state nil load-watcher)

;; ---------------------------------------------------------------------------
;; HTML

(html
 (head
  (link :href "app.css" :rel "stylesheet"))
 (body
  ;; Form to get a record from server db
  (let [username (cell nil)]
    (form :submit #(client/get-user @username)
          (p (label "Username search: ")
             (input :value username :change #(reset! username @%))
             (button :type "submit" "submit"))))

  ;; Form to add a record to the server db
  (let [content (cell nil)]
    (form :submit #(client/add-user @content)
          (p (label "Add username: ")
             (input :value content :change #(reset! content @%))
             (button :type "submit" "submit"))))

  (br)

  ;; Buttons to save and load xy coords
  (let [username (cell nil)]
    (form :submit #(save-load-action @save-load-mode @username)
          (p (label "Username: ")
             (input :value username :change #(reset! username @%)) (br)
             (button :click #(reset! save-load-mode :save)
                     :type "submit"
                     "Save XY")
             (button :click #(reset! save-load-mode :load)
                     :type "submit"
                     "Load XY"))))
  
  ;; periods (.) will represent empty space
  ;; hashtag (#) will represent walls 
  ;; at sign (@) will represent the player
  ;; letters (A) will represent various enemies
  (p :id "health"(text "HP: ~{(player/print-health)}"))
  (br)
  (p :id "board" (text "~{(w/print-board)}"))
  (br)
  
  ;; Error messages and get-record output
  (p :toggle loading?
     (text "Processing ~{loading?} requests..."))
  (p :toggle error-message
     (text "Error: ~{error-message}"))
  (p (text "Record: ~{client/record}"))))
